# .github/workflows/ci.yml

name: CI - Quality and Security Scans

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job performs all quality and security checks
  quality-and-security:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- BACKEND CHECKS ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Use the same python version as your project

      - name: Install Python Dependencies & Tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit pip-audit
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
      
      - name: Lint Python Code with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Scan Python Code with Bandit (SAST)
        run: bandit -r backend/ -ll -ii # Scans for common security issues

      - name: Scan Python Dependencies with pip-audit (SCA)
        run: pip-audit

      # --- FRONTEND CHECKS ---
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use the same node version as your project

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm install

      - name: Lint Frontend Code with ESLint
        working-directory: ./frontend
        run: npm run lint # Assumes you have an "eslint ." script in package.json
      
      - name: Scan Frontend Dependencies with NPM Audit (SCA)
        working-directory: ./frontend
        run: npm audit --audit-level=high # Fails only on high-severity vulnerabilities